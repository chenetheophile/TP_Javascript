{"version":3,"sources":["../src/independenceTest.js"],"names":["require","cdf","throwError","independenceTest","observed","ddof","Array","isArray","length","K","M","df","rowSums","fill","colSums","n","forEach","rowEle","i","colEle","j","chiSq","exp","value","pValue","module","exports"],"mappings":";;eAAgBA,QAAQ,aAAR,C;IAARC,G,YAAAA,G;;gBACeD,QAAQ,SAAR,C;IAAfE,U,aAAAA,U;;AAER,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,QAAD,EAAWC,IAAX,EAAoB;AACzC,QAAI,CAACC,MAAMC,OAAN,CAAcH,QAAd,CAAD,IAA4BA,SAASI,MAAT,KAAoB,CAApD,EAAuD;AACnDN,mBAAW,iDAAX;AACH;;AAED,QAAMO,IAAIL,SAASI,MAAnB;AACA,QAAME,IAAIN,SAAS,CAAT,EAAYI,MAAtB;AACA,QAAMG,KAAM,OAAON,IAAP,KAAgB,QAAjB,GAA8BA,IAA9B,GAAuC,CAAlD;AACA,QAAMO,UAAUN,MAAMG,CAAN,EAASI,IAAT,CAAc,CAAd,CAAhB;AACA,QAAMC,UAAUR,MAAMI,CAAN,EAASG,IAAT,CAAc,CAAd,CAAhB;AACA,QAAIE,IAAI,CAAR;;AAEAH,YAAQI,OAAR,CAAgB,UAACC,MAAD,EAASC,CAAT,EAAe;AAC3BJ,gBAAQE,OAAR,CAAgB,UAACG,MAAD,EAASC,CAAT,EAAe;AAC3BR,oBAAQM,CAAR,KAAcd,SAASc,CAAT,EAAYE,CAAZ,CAAd;AACAN,oBAAQM,CAAR,KAAchB,SAASc,CAAT,EAAYE,CAAZ,CAAd;AACAL,iBAAKX,SAASc,CAAT,EAAYE,CAAZ,CAAL;AACH,SAJD;AAKH,KAND;;AAQA,QAAIC,QAAQ,CAAZ;AACAT,YAAQI,OAAR,CAAgB,UAACC,MAAD,EAASC,CAAT,EAAe;AAC3BJ,gBAAQE,OAAR,CAAgB,UAACG,MAAD,EAASC,CAAT,EAAe;AAC3B,gBAAME,MAAOL,SAASE,MAAV,GAAoBJ,CAAhC;AACAM,qBAAU,CAACjB,SAASc,CAAT,EAAYE,CAAZ,IAAiBE,GAAlB,KAA0B,CAA3B,GAAgCA,GAAzC;AACH,SAHD;AAIH,KALD;;AAOA,WAAO;AACHC,eAAOF,KADJ;AAEHG,gBAAQ,IAAIvB,IAAIoB,KAAJ,EAAW,CAACZ,IAAI,CAAL,KAAWC,IAAI,CAAf,IAAoBC,EAA/B;AAFT,KAAP;AAIH,CAhCD;;AAkCAc,OAAOC,OAAP,GAAiBvB,gBAAjB","file":"independenceTest.js","sourcesContent":["const { cdf } = require('chi-squared');\nconst { throwError } = require('./utils');\n\nconst independenceTest = (observed, ddof) => {\n    if (!Array.isArray(observed) || observed.length === 0) {\n        throwError('expected frequency must be an array of size > 0');\n    }\n\n    const K = observed.length;\n    const M = observed[0].length;\n    const df = (typeof ddof === 'number') ? (ddof) : (0);\n    const rowSums = Array(K).fill(0);\n    const colSums = Array(M).fill(0);\n    let n = 0;\n\n    rowSums.forEach((rowEle, i) => {\n        colSums.forEach((colEle, j) => {\n            rowSums[i] += observed[i][j];\n            colSums[j] += observed[i][j];\n            n += observed[i][j];\n        });\n    });\n\n    let chiSq = 0;\n    rowSums.forEach((rowEle, i) => {\n        colSums.forEach((colEle, j) => {\n            const exp = (rowEle * colEle) / n;\n            chiSq += ((observed[i][j] - exp) ** 2) / exp;\n        });\n    });\n\n    return {\n        value: chiSq,\n        pValue: 1 - cdf(chiSq, (K - 1) * (M - 1) - df),\n    };\n};\n\nmodule.exports = independenceTest;\n"]}
{"version":3,"sources":["../src/goodnessOfFitTest.js"],"names":["require","cdf","throwError","reducer","goodnessOfFit","observed","expected","ddof","Array","isArray","length","df","fill","reduce","chisq","a","c","i","value","pValue","module","exports"],"mappings":";;AAAA;eACgBA,QAAQ,aAAR,C;IAARC,G,YAAAA,G;;gBACwBD,QAAQ,SAAR,C;IAAxBE,U,aAAAA,U;IAAYC,O,aAAAA,O;;AAEpB,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA8B;AAChD,QAAI,CAACC,MAAMC,OAAN,CAAcJ,QAAd,CAAD,IAA4BA,SAASK,MAAT,KAAoB,CAApD,EAAuD;AACnDR,mBAAW,iDAAX;AACH;AACD,QAAIS,KAAKJ,IAAT;AACA,QAAI,CAACC,MAAMC,OAAN,CAAcH,QAAd,CAAL,EAA8B;AAC1BK,aAAKL,QAAL;AACAA,mBAAWE,MAAMH,SAASK,MAAf,EAAuBE,IAAvB,CAA4BP,SAASQ,MAAT,CAAgBV,OAAhB,IAA2BE,SAASK,MAAhE,CAAX;AACH;;AAED,QAAIJ,SAASI,MAAT,KAAoBL,SAASK,MAAjC,EAAyC;AACrCR,mBAAW,+DAAX;AACH;;AAED,QAAI,OAAOS,EAAP,KAAc,QAAlB,EAA4B;AACxBA,aAAK,CAAL,CADwB,CAChB;AACX;;AAED,QAAMG,QAAQT,SAASQ,MAAT,CAAgB,UAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP;AAAA,eAAaF,IAAM,CAACC,IAAIV,SAASW,CAAT,CAAL,KAAqB,CAAtB,GAA2BX,SAASW,CAAT,CAA7C;AAAA,KAAhB,EAA2E,CAA3E,CAAd;AACA,WAAO;AACHC,eAAOJ,KADJ;AAEHK,gBAAQ,IAAIlB,IAAIa,KAAJ,EAAWT,SAASK,MAAT,GAAkB,CAAlB,GAAsBC,EAAjC;AAFT,KAAP;AAIH,CAvBD;;AAyBAS,OAAOC,OAAP,GAAiBjB,aAAjB","file":"goodnessOfFitTest.js","sourcesContent":["/* eslint-disable no-param-reassign */\nconst { cdf } = require('chi-squared');\nconst { throwError, reducer } = require('./utils');\n\nconst goodnessOfFit = (observed, expected, ddof) => {\n    if (!Array.isArray(observed) || observed.length === 0) {\n        throwError('expected frequency must be an array of size > 0');\n    }\n    let df = ddof;\n    if (!Array.isArray(expected)) {\n        df = expected;\n        expected = Array(observed.length).fill(observed.reduce(reducer) / observed.length);\n    }\n\n    if (expected.length !== observed.length) {\n        throwError('Observed and expected frequency arrays must be of same length');\n    }\n\n    if (typeof df !== 'number') {\n        df = 0; // default value of df is (length - 1)\n    }\n\n    const chisq = observed.reduce((a, c, i) => a + (((c - expected[i]) ** 2) / expected[i]), 0);\n    return {\n        value: chisq,\n        pValue: 1 - cdf(chisq, observed.length - 1 - df),\n    };\n};\n\nmodule.exports = goodnessOfFit;\n"]}